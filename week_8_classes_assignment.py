# -*- coding: utf-8 -*-
"""Week 8 Classes Assignment

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VYo5a7xTZZ6Hz_-lwUt9WYo8JhAP07Ka
"""

class BankAccount:
  def __init__(self, accountNum, balance):
    self.accountNumber=accountNum
    self.balance=float(balance)

  def withdrawal(self, amo):
    if amo>self.balance:
      print("you cannot withdraw due to insufficient balance")
    else:
      self.balance=self.balance-float(amo)
      print("you withdrew ",amo)
      print("\nAvailable balance $",self.balance)
  def deposit(self, amo):
    self.balance=self.balance+float(amo)
    print("Amount deposited $",amo)
    print("\nAvailable balance $",self.balance)

  def getBalace(self):
    print("\nAvailable balance $",self.balance,"$")

class CheckingAccount(BankAccount):

    def __init__(self, accountNum, balance):
        super().__init__(accountNum, balance)
        self.checkMinimumBalance()

    def deductFees(self,fees=5):
        self.fees=fees
        if self.fees<=self.balance:
          print("Starting balance $", self.balance)
          self.balance=self.balance-5
          print("Fees deducted $5 \n")
          print("Final balance after fees $",self.balance)
        else:
          print("\nFees can't be deducted due to insufficient balance")

    def checkMinimumBalance(self,minimumBalance=50):
        self.minimumBalance=minimumBalance
        if self.balance>self.minimumBalance:
          print("\nThere is enough balance in your account")
          print("\nAvailable balance ",self.balance,"$")
        else:
          print("\nThere is not enough money in your account ($50 minimum)")
          self.deductFees()
      

class SavingAccount(BankAccount):
    
    def __init__(self, accountNum, balance):
        super().__init__(accountNum, balance)
    
    def addInterest(self,interestRate=2):
        self.interestRate=interestRate
        interestamo=(self.balance*self.interestRate)/100;
        self.balance=self.balance+interestamo;
        print("\nAvailable balance after interest $",self.balance)


checking = CheckingAccount(1, 100)
checking2 = CheckingAccount(2, 25)

savings = SavingAccount(3, 100)
savings2 = SavingAccount(4, 25)
savings.addInterest()